// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  firebaseUid    String    @unique
  email          String    @unique
  name           String    
  profileImage  String?
  folders        Folder[]  @relation("OwnerFolders")
  sharedFolders  UserFolderShare[] // 폴더 공유받은 목록
  createdAt      DateTime  @default(now())
}

model Folder {
  id         String    @id @default(cuid())
  name       String
  ownerId    String
  owner      User      @relation("OwnerFolders", fields: [ownerId], references: [id])
  links      Link[]
  inviteCode String?   @unique  
  shareKey   String?  @unique
  shares     UserFolderShare[]
  isShared  Boolean  @default(false)
  createdAt  DateTime  @default(now())
}

model UserFolderShare {
  id        String   @id @default(cuid())
  folderId  String
  userId    String
  permission String
  folder    Folder   @relation(fields: [folderId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  @@unique([folderId, userId])
}
model Link {
  id         String    @id @default(cuid())
  title      String
  url        String
  thumbnail  String?   // 썸네일 이미지 URL
  favicon    String?   // 사이트 아이콘 URL
  description String?  // 미리보기 텍스트 (description 메타태그)
  folderId   String
  isPin      Boolean   @default(false)
  folder     Folder    @relation(fields: [folderId], references: [id])
  linkTags   LinkTag[]
  createdAt  DateTime  @default(now())
}

model Tag {
  id        String       @id @default(cuid())
  name      String    @unique
  linkTags  LinkTag[]
}

model LinkTag {
  id       String    @id @default(cuid())
  linkId   String
  tagId    String
  link     Link   @relation(fields: [linkId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])

  @@unique([linkId, tagId])
}
